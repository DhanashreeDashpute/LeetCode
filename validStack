class Solution {
    public boolean isValid(String s) {
         Stack<Character> stack = new Stack<>();

        // Iterate through each character in the string
        for (char c : s.toCharArray()) {
            // If it is an opening bracket, push it onto the stack
            if (c == '(' || c == '{' || c == '[') {
                stack.push(c);
            } 
            // If it is a closing bracket, check the top of the stack
            else {
                if (stack.isEmpty()) {
                    return false; // If the stack is empty, there is no matching opening bracket
                }
                char top = stack.pop();
                if ((c == ')' && top != '(') ||
                    (c == '}' && top != '{') ||
                    (c == ']' && top != '[')) {
                    return false; // If the top of the stack does not match the closing bracket
    }
}
        }
    
     // If the stack is empty, all brackets were properly matched
        return stack.isEmpty();
    }
}

/*
Input: s = "()"

Output: true*/
