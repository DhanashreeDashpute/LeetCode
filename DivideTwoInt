class Solution {
    public int divide(int dividend, int divisor) {
          if (dividend == Integer.MIN_VALUE && divisor == -1) {
            return Integer.MAX_VALUE; // 2^31 - 1
        }

        // Determine the sign of the result
        boolean isNegative = (dividend < 0) ^ (divisor < 0);

        // Convert both numbers to positive using absolute values
        long absDividend = Math.abs((long) dividend);
        long absDivisor = Math.abs((long) divisor);

        int quotient = 0;

        // Subtract absDivisor from absDividend using bitwise shifts
        while (absDividend >= absDivisor) {
            long temp = absDivisor;
            int multiple = 1;

            // Optimize the subtraction using left shifts to increase speed
            while (absDividend >= (temp << 1)) {
                temp <<= 1;
                multiple <<= 1;
            }

            // Subtract the largest possible multiple of divisor
            absDividend -= temp;
            quotient += multiple;
        }

        // Apply the determined sign to the quotient
        return isNegative ? -quotient : quotient;
    }
}

/*Input: dividend = 10, divisor = 3
Output: 3
Explanation: 10/3 = 3.33333.. which is truncated to 3.*/
