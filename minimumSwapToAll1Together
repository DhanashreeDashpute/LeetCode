public class Solution {

    public int minSwaps(int[] nums) {
        int n = nums.length;
        
        // Count the total number of 1's in the array
        int count1 = 0;
        for (int num : nums) {
            count1 += num;
        }

        // Edge case: if there are no 1's or the entire array is 1's
        if (count1 == 0 || count1 == n) {
            return 0;
        }

        // Initialize the sliding window with the first `count1` elements
        int currentOnes = 0;
        for (int i = 0; i < count1; i++) {
            currentOnes += nums[i];
        }

        // Store the maximum number of 1's found in any window of size `count1`
        int maxOnesInWindow = currentOnes;

        // Slide the window across the circular array
        for (int i = 1; i < n; i++) {
            currentOnes = currentOnes - nums[i - 1] + nums[(i + count1 - 1) % n];
            maxOnesInWindow = Math.max(maxOnesInWindow, currentOnes);
        }

        // The minimum number of swaps required
        return count1 - maxOnesInWindow;
    }
}
