class Solution {
    public int searchInsert(int[] nums, int target) {
        int low = 0;
        int high = nums.length - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;  // Calculate the mid-point to avoid overflow

            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return low;  // Return the position where the target would be inserted
    }
}

/* Input: nums = [1,3,5,6], target = 5
Output: 2 */
