class Solution {
    public List<String> letterCombinations(String digits) {
         if (digits == null || digits.isEmpty()) {
            return new ArrayList<>(); // Return an empty list if the input is empty.
        }

        // Mapping of digits to corresponding letters.
        String[] digitToLetters = {
            "",     // 0 (no mapping)
            "",     // 1 (no mapping)
            "abc",  // 2
            "def",  // 3
            "ghi",  // 4
            "jkl",  // 5
            "mno",  // 6
            "pqrs", // 7
            "tuv",  // 8
            "wxyz"  // 9
        };

        List<String> result = new ArrayList<>();
        backtrack(result, digits, digitToLetters, new StringBuilder(), 0);
        return result;
    }

    private void backtrack(List<String> result, String digits, String[] digitToLetters, StringBuilder combination, int index) {
        if (index == digits.length()) {
            result.add(combination.toString());
            return;
        }

        String letters = digitToLetters[digits.charAt(index) - '0']; // Find the corresponding letters for the current digit.
        for (char letter : letters.toCharArray()) {
            combination.append(letter); // Append the current letter.
            backtrack(result, digits, digitToLetters, combination, index + 1); // Recurse for the next digit.
            combination.deleteCharAt(combination.length() - 1); // Remove the last letter to backtrack.
        }
    }
    
}
/*Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]*/
