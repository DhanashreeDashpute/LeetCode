class Solution {
    public int[] searchRange(int[] nums, int target) {
       
        int[] result = new int[]{-1, -1};
        
        // Find the starting position
        result[0] = findPosition(nums, target, true);
        // Find the ending position
        result[1] = findPosition(nums, target, false);
        
        return result;
    }
    
    private int findPosition(int[] nums, int target, boolean findStart) {
        int left = 0, right = nums.length - 1, position = -1;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) {
                position = mid; // record the position
                if (findStart) {
                    right = mid - 1; // continue searching on the left side
                } else {
                    left = mid + 1; // continue searching on the right side
                }
            } else if (nums[mid] < target) {
                left = mid + 1; // search in the right half
            } else {
                right = mid - 1; // search in the left half
            }
        }
        
        return position;
    }
}

/*Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]*/
